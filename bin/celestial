#!/usr/bin/env php
<?php
/**
 * CELESTIAL SCRIPT
 * @author William Hleucka <william.hleucka@gmail.com>
 */

include __DIR__ . "/../vendor/autoload.php";
include __DIR__ . "/console.php";

use Celestial\Kernel\Main;
use Celestial\Config\Application;
use Constellation\Database\DB;
use Composer\Autoload\ClassMapGenerator;

$dev_port = 8080;

function banner()
{
    $banner = <<<BANNER

██████╗███████╗██╗     ███████╗███████╗████████╗██╗ █████╗ ██╗
██╔════╝██╔════╝██║     ██╔════╝██╔════╝╚══██╔══╝██║██╔══██╗██║
██║     █████╗  ██║     █████╗  ███████╗   ██║   ██║███████║██║
██║     ██╔══╝  ██║     ██╔══╝  ╚════██║   ██║   ██║██╔══██║██║
╚██████╗███████╗███████╗███████╗███████║   ██║   ██║██║  ██║███████╗
 ╚═════╝╚══════╝╚══════╝╚══════╝╚══════╝   ╚═╝   ╚═╝╚═╝  ╚═╝╚══════╝
BANNER;
    cprint(Console::green($banner, "bold"));
}

$app = new Main(false);
$db = $app->container->get(DB::class);
$migrations_path = Application::$migrations["migrations_path"];
$cache_path = Application::$view["cache_path"];

$shortopts = "";
#$shortops .= "f:"; // Required
$shortopts .= "p::"; // Optional
$shortopts .= "hs"; // Do not accept values

$longopts = [
    "help",
    "serve",
    "port::",
    "cache-create",
    "migration-run",
    "migration-fresh",
    "migration-up::",
    "migration-down::",
];

$options = getopt($shortopts, $longopts);

if ($argc == 1) {
    help();
}
if (!$options) {
    cprint(Console::red("Eh? Unknown command"));
}

foreach ($options as $key => $value) {
    switch ($key) {
        case "h":
        case "help":
            help();
            break;
        case "s":
        case "serve":
            serve();
            break;
        case "p":
        case "port":
            port($value);
            break;
        case "cache-create":
            cacheCreate();
            break;
        case "migration-run":
            migrationRun();
            break;
        case "migration-fresh":
            migrationFresh();
            break;
        case "migration-up":
            if (!migrationExists($value)) {
                migrationUp($value);
            } else {
                cprint(Console::yellow("Skipping: migration file already run"));
            }

            break;
        case "migration-down":
            if (migrationExists($value)) {
                migrationDown($value);
            } else {
                cprint(
                    Console::yellow("Skipping: migration file hasn't been run")
                );
            }
            break;
    }
}

function cprint($string)
{
    printf($string . "\n");
}

function input(string $prompt = null)
{
    echo $prompt;
    $handle = fopen("php://stdin", "r");
    $output = fgets($handle);
    return trim($output);
}

function classMap(string $path)
{
    return ClassMapGenerator::createMap($path);
}

function help()
{
    banner();
    $help = <<<HELP
Usage: celestial [options...]
-h, --help                  Get help for commands
-p, --port                  Set development server port
-s, --serve                 Run development server
--cache-create              Create view cache directory
--migration-run             Run migration files and call up method
--migration-fresh           Drop database and call migration-run
--migration-up=file         Call up method from migration file
--migration-down=file       Call down method from migration file

HELP;
    cprint($help);
}

function port($new_port)
{
    global $port;
    $port = $new_port;
}

function serve()
{
    global $port, $options;
    if (key_exists("port", $options) || key_exists("p", $options)) {
        port($options["port"] ?? $options["p"]);
    }
    shell_exec("php -S 0.0.0.0:{$port} -t $(pwd)/public");
}

function cacheCreate()
{
    global $cache_path;
    if (!file_exists($cache_path)) {
        mkdir($cache_path);
    }
    $result = chown($cache_path, "www-data");
    if ($result) {
        cprint(Console::green("Success: view cache directory created"));
    } else {
        cprint(Console::red("Error: view cache directory couldn't be created"));
    }
}

function migrationRun()
{
    global $migrations_path;
    if (file_exists($migrations_path)) {
        $files = glob($migrations_path . "/*.php");
        foreach ($files as $file) {
            if (file_exists($file)) {
                $exists = migrationExists($file);
                if ($exists) {
                    // Do not run migrations that have already been run
                    continue;
                }
                $run_it = input(
                    Console::yellow(
                        "Do you want to run the migration file $file? (y/n) "
                    )
                );
                if ($run_it === "y") {
                    migrationUp($file);
                } else {
                    cprint("Skipping...");
                }
            }
        }
    }
    cprint(Console::green("Done!"));
}

function migrationRow($md_5)
{
    global $db;
    return $db->selectOne(
        "SELECT * FROM migrations WHERE migration_hash = ?",
        $md_5
    );
}

function migrationInsert($file)
{
    global $db;
    if (!file_exists($file)) {
        error_log("Migration file doesn't exist {$file}");
        die("migrationInsert error");
    }
    $md_5 = md5(basename($file));
    return $db->query("INSERT INTO migrations SET migration_hash = ?", $md_5);
}

function migrationDelete($file)
{
    global $db;
    if (!file_exists($file)) {
        error_log("Migration file doesn't exist {$file}");
        die("migrationDelete error");
    }
    $md_5 = md5(basename($file));
    return $db->query("DELETE FROM migrations WHERE migration_hash = ?", $md_5);
}

function migrationTableExists()
{
    global $db;
    return $db->selectOne("SHOW TABLES LIKE 'migrations'");
}

function migrationExists($file): bool
{
    if (!file_exists($file)) {
        error_log("Migration file doesn't exist {$file}");
        die("migrationExists error");
    }
    if (migrationTableExists()) {
        $md_5 = md5(basename($file));
        $exists = migrationRow($md_5);
        return $exists ? true : false;
    }
    return false;
}

function migrationRunner($up = true)
{
    global $migrations_path;
    if (file_exists($migrations_path)) {
        $files = glob($migrations_path . "/*.php");
        // reverse the order of migrationRunner on drop
        if (!$up) {
            rsort($files);
        }
        foreach ($files as $file) {
            if (file_exists($file)) {
                if ($up) {
                    migrationUp($file);
                } else {
                    migrationDown($file);
                }
            }
        }
    }
}

function migrationUp($file)
{
    global $db;
    if (file_exists($file)) {
        $class = include $file;
        $up_query = $class->up();
        if ($db->run($up_query)) {
            if (!migrationExists($file)) {
                migrationInsert($file);
            }
            cprint(Console::green("Success: migration up => $file"));
        } else {
            cprint(Console::yellow("Error: migration up failed! => $file"));
        }
    } else {
        cprint(Console::red("Error: migration file doesn't exist: {$file}"));
    }
}

function migrationDown($file)
{
    global $db;
    if (file_exists($file)) {
        $class = include $file;
        $down_query = $class->down();
        if ($db->run($down_query)) {
            if (migrationExists($file)) {
                migrationDelete($file);
            }
            cprint(Console::green("Success: migration down => $file"));
        } else {
            cprint(Console::yellow("Error: migration down failed! => $file"));
        }
    } else {
        cprint(Console::red("Error: migration file doesn't exist: {$file}"));
    }
}

function migrationFresh()
{
    $run_it = input(
        Console::yellow(
            "Are you sure you want to drop the database and run the migration files? (y/n) "
        )
    );
    if ($run_it === "y") {
        migrationRunner(false);
        migrationRunner();
    }
    cprint(Console::green("Done!"));
}
